define(function(require, exports, module) {

    var baseHandler = require("plugins/c9.ide.language/base_handler");
    var handler = module.exports = Object.create(baseHandler);
    var workerUtil = require("plugins/c9.ide.language/worker_util");
    
    /***** Overriding handler methods *****/
    
    // Register the language.
    handler.handlesLanguage = function(language) {
        return language === "php";
    };

    // Set up the analyzer.
    handler.analyze = function(value, ast, callback) {
        // Get the full path to the plugin directory.
        var handlerSource = handler.$source.split("/");
        var pluginPath = handler.workspaceDir.replace("workspace", ".c9") + "/" + handlerSource[0] + "/" + handlerSource[1] + "/";
        var phpcsPath = pluginPath + "server/phpcs/";
        workerUtil.execAnalysis(
            "php",
            {
                mode: "stdin",
                json: true,
                args:
                    [
                        phpcsPath + "phpcs.phar", 
                        "-q",
                        "-w",
                        "--severity=1",
                        "--report=json", 
                        "--runtime-set", "ignore_errors_on_exit",  "1", 
                        "--runtime-set", "ignore_warnings_on_exit", "1",
                        "--runtime-set", "installed_paths", phpcsPath + "rules",
                        "--runtime-set", "encoding", "utf-8",
                        "--runtime-set", "report_width", "auto",
                        "--runtime-set", "testVersion", "5.2-7.1",
                    //    "--runtime-set", "severity", "0",
                        "--tab-width=0",
                        "--standard=WordPress-Extra,WordPress-Docs,PHPCompatibility"
                    ],
                maxCallInterval: 500,
                timeout: 5000,
            },
            function(err, stdout, stderr) {
                var markers = [];
                if (err && err.code !== 255) return callback(err);
                if ( typeof stdout.files.STDIN.messages !== 'undefined' ) {
                    var messages = stdout.files.STDIN.messages;
                    messages.forEach( function parseMessage( msg ) {
                        var marker = getMarker(msg); // Generate the marker.
                        markers.push(marker);
                    });
                }
                callback(null, markers);
            }
        );
    };

    /***** Helper Functions *****/

    // Get a marker to display based on an error message generated by PHPCS.
    function getMarker( msg ) {
        // Defining array of numbers to be replaced with more distinctive unicode characters.
        var severityLevels = [ 
            "⓪",
            "➀",
            "➁",
            "➂",
            "➃",
            "➄",
            "➅",
            "➆",
            "➇",
            "➈",
            "➉"
            ];
        var unicodeNumbers = [
            "𝟎",
            "𝟏",
            "𝟐",
            "𝟑",
            "𝟒",
            "𝟓",
            "𝟔",
            "𝟕",
            "𝟖",
            "𝟗"
            ];
        
        // Defining error severity.
        var severity = msg.severity;
        if ( typeof severityLevels[msg.severity] !== 'undefined' ) {
            severity = 5 !== severity ? severityLevels[msg.severity] : ""; // Hide the default severity (5).
        }
        
        // Defining message type: error or warning?
        var type = msg.type.match(/error/i) ? "🔴" : "🔶";
        
        // Can the error be fixed with PHPCBF? Please note that even though it'll display the error can be fixed with PHPCF, nothing has been implemented yet in order to do it automatically.
        var quickfix = msg.fixable ? " ✔" : "";
        
        // Defining the position of the error.
        var line = replaceKeyWithValue( msg.line, unicodeNumbers );
        var col = replaceKeyWithValue( msg.column, unicodeNumbers );
        var pos = "(" +line + ":" + col + ")";
        
        // Defining from which coding standards this error has been found between WPCS and PHPCompatibility.
        var source = msg.source;
        if ( source.match(/(wordpress)|(wp)|(squiz)|(generic)|(pear)|(psr)/i) || msg.message.match(/(wordpress)|(wp)/i) ) {
            source = "𝗪𝗣𝗖𝗦";
        } else if ( source.match(/compatibility/i) || msg.message.match(/compatibility/i) ) {
            source = "𝗣𝗛𝗣𝗖𝗼𝗺𝗽𝗮𝘁𝗶𝗯𝗶𝗹𝗶𝘁𝘆";
        } else {
            source = "[" + source.substr(0, source.indexOf('.')) + "]";
        }
        
        // Defining the text to display in the marker.
        var text = type + " " + severity + " " + source + quickfix + " " + pos + " " + msg.message + ".";
        
        // Generating the marker with all the previous data combined.
        var marker = {
            pos: { sl: msg.line - 1, el: msg.line -1, sc: msg.column -1, ec: msg.column + 1 },
            message: text,
            level: 'warning',
            quickfix: msg.fixable
        };

        return marker;
    }
    
    // In a string, replace all occurences of keys in an array with their corresponding value.
    function replaceKeyWithValue( str, arr ) {
        if ( typeof str !== 'string' ) {
            str = str.toString();
        }
        for ( var key in arr ) {
           str = str.split(key).join(arr[key]);
        }
        return str;
    }
    
});